name: Build and Release

on:
  push:
    tags:
      - 'v*'            # 仅当标签以 v 开头（如 v1.0.0）时触发
  workflow_dispatch:     # 支持手动触发

jobs:
  build-and-release:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        node-version: [20.x]     # 如果需要，可以在此指定 Node.js 版本
    outputs:
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix['node-version'] }}
          cache: 'npm'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install/Upgrade Python build tools
        run: python -m pip install --upgrade setuptools wheel

      - name: Clean node_modules
        if: runner.os == 'Linux'
        run: rm -rf node_modules release/app/node_modules
      - name: Clean node_modules
        if: runner.os == 'Windows'
        run: Remove-Item -Recurse -Force node_modules, release/app/node_modules -ErrorAction SilentlyContinue
        shell: powershell

      - name: Install dependencies
        run: npm install

      - name: Clean previous build output
        if: runner.os == 'Linux'
        run: rm -rf release/build
      - name: Clean previous build output
        if: runner.os == 'Windows'
        run: Remove-Item -Recurse -Force release/build -ErrorAction SilentlyContinue
        shell: powershell

      - name: Build application
        run: |
          if [ "${{ runner.os }}" = "Linux" ]; then
            npm run package -- --config.asar=false
          else
            npm run package
          fi
        shell: bash

      - name: Get version from package.json
        id: get_version
        run: echo "version=$(node -p \"require('./package.json').version\")" >> $GITHUB_OUTPUT

      - name: Determine artifact info
        id: artifact
        shell: bash
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          if [ "${{ runner.os }}" = "Linux" ]; then
            echo "paths=release/build/*.AppImage"  >> $GITHUB_OUTPUT
            echo "name=app-${VERSION}-linux-${{ runner.arch }}.AppImage" >> $GITHUB_OUTPUT
          else
            echo "paths=release/build/*.exe"      >> $GITHUB_OUTPUT
            echo "name=app-${VERSION}-windows-${{ runner.arch }}.exe" >> $GITHUB_OUTPUT
          fi
          echo "tag=v${VERSION}"                  >> $GITHUB_OUTPUT
          echo "release_name=${VERSION}"          >> $GITHUB_OUTPUT

      - name: Create or update GitHub Release
        id: create_release
        uses: ncipollo/release-action@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag: ${{ steps.artifact.outputs.tag }}
          name: Release ${{ steps.artifact.outputs.release_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true

      - name: Upload release asset
        uses: ncipollo/release-action@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          artifacts: ${{ steps.artifact.outputs.paths }}
          tag: ${{ steps.artifact.outputs.tag }}
          token: ${{ secrets.GITHUB_TOKEN }}
          assetName: ${{ steps.artifact.outputs.name }}
